import forte

molecule water_dimer{
0 1
O  -1.551007  -0.114520   0.000000
H  -1.934259   0.762503   0.000000
H  -0.599677   0.040712   0.000000
--
0 1
O   1.350625   0.111469   0.000000
H   1.680398  -0.373741  -0.758561
H   1.680398  -0.373741   0.758561
symmetry c1
}

molecule water_sys{
0 1
O  -1.551007  -0.114520   0.000000
H  -1.934259   0.762503   0.000000
H  -0.599677   0.040712   0.000000
symmetry c1
}

#****** Calculate environment method ******
activate(water_dimer)
set {
  basis         sto-3g
  scf_type      pk
  e_convergence 10
}

E, ori_wfn = energy('scf', return_wfn=True)

# ****** Create embedded system wfn ******
set forte {
  job_type Embedding
  SYS_DOCC 5
  LOCALIZATION_METHOD IAO_IBO
}

E_test, wfn_mod = energy('forte', ref_wfn=ori_wfn, return_wfn=True)

activate(water_sys)
E_sys_ref, wfn_sys = energy('scf', return_wfn=True)
wfn_sys.H().print_out()

# ****** Set modified(embedded) matrices ******
Ca_sys = wfn_sys.Ca()
Ca_mod = wfn_mod.Ca()
Ca_sys.copy(Ca_mod)

Fa_sys = wfn_sys.Fa()
Fa_mod = wfn_mod.Fa()
Fa_sys.copy(Fa_mod)

Da_sys = wfn_sys.Da()
Da_mod = wfn_mod.Da()
Da_sys.copy(Da_mod)

H_sys = wfn_sys.H()
H_mod = wfn_mod.H()
H_sys.copy(H_mod)

S_sys = wfn_sys.S()
S_mod = wfn_mod.S()
S_sys.copy(S_mod)

# ****** Calculate cheap system method ******
set forte {
  job_type ownscf
#  INTEGRAL_METHOD mints
}

E_cheap_sys, wfn_sys_ready = energy('forte', ref_wfn=wfn_sys, return_wfn=True)

# ****** Calculate expensive system method ******

E_exp_sys = energy('mp2', ref_wfn=wfn_sys_ready)

