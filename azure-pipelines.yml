# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
jobs:
- job: 'linux_build'
  displayName: 'Linux Builds'
  pool:
    vmImage: 'ubuntu-latest'
  timeoutInMinutes: 90
  strategy:
    maxParallel: 4
    matrix:
      max_det_orb_64:
        F_COMPILER: 'gfortran'
        APT_INSTALL: 'gfortran'
        C_COMPILER: 'gcc'
        CXX_COMPILER: 'g++'
        PYTHON_VER: '3.7'
        BUILD_TYPE: 'debug'
        MAX_DET_ORB: 64

#     max_det_orb_128:
#       PYTHON_VER: '3.7'
#       BUILD_TYPE: 'debug'
#       MAX_DET_ORB: 128

  steps:
  - bash: |
      [[ "${APT_REPOSITORY}" ]] && echo "Add Repo ${APT_REPOSITORY}" && sudo add-apt-repository "${APT_REPOSITORY}"
      sudo apt-get update
      sudo apt-get install ${APT_INSTALL}
    displayName: "Apt-Get Packages"

  - bash: |
      echo "" && echo "Ubuntu"
      lsb_release -a

      echo "" && echo "Uname:"
      uname -a

      echo "" && echo "Free:"
      free -m

      echo "" && echo "df:"
      df -h

      echo "" && echo "Ulimit:"
      ulimit -a

      echo "" && echo "Nprocs:"
      getconf _NPROCESSORS_ONLN

      echo "C Ver:"
      ${C_COMPILER} --version

      echo "CXX Ver:"
      ${CXX_COMPILER} --version

      echo "F Ver:"
      ${F_COMPILER} --version
    displayName: "Setup Information"

  - bash: |
        echo "##vso[task.prependpath]$CONDA/bin"
        conda config --set always_yes yes
    displayName: "Add Conda to PATH"

  - bash: |
      conda create -q \
        -n p4env \
        python=$PYTHON_VER \
        psi4/label/dev::gau2grid=2 \
        psi4/label/dev::libint2 \
        psi4/label/dev::libxc \
        psi4/label/dev::ambit \
        psi4/label/dev::chemps2 \
        psi4/label/dev::dkh \
        psi4/label/dev::gdma \
        psi4/label/dev::pcmsolver \
        psi4/label/dev::simint \
        psi4/label/dev::dftd3 \
        psi4/label/dev::gcp \
        psi4/label/dev::resp \
        psi4/label/dev::pycppe \
        psi4/label/dev::pylibefp \
        psi4/label/dev::snsmp2 \
        psi4/label/dev::fockci \
        psi4/label/dev::mp2d \
        psi4/label/dev::ci-psi4 \
        blas=*=mkl \
        mkl-include \
        networkx \
        pytest \
        eigen \
        mpfr \
        pytest-xdist \
        conda-forge::qcelemental \
        conda-forge::qcengine \
        conda-forge::pymdi \
        adcc::adcc
      source activate p4env
      conda install -c conda-forge \
        cmake \
        hdf5 \
        boost \
        mkl-devel \
        pybind11 \
        pytest \
        pytest-xdist \
        codecov \
        lcov \
        pytest-cov
      which python
      pip install git+https://github.com/i-pi/i-pi.git@master-py3
      conda list
    displayName: 'Build Psi4 Environment'

  - bash: |
      source active p4env
      git clone https://github.com/psi4/psi4.git psi4
      cmake -H. -Bpsi4-obj
        -DCMAKE_INSTALL_PREFIX=$(Build.sourcesDirectory)/psi4-bin \
        -DCMAKE_CXX_STANDARD=17 \
        -DPYTHON_EXECUTABLE="${CONDA_PREFIX}/bin/python" \
        -Dpybind11_DIR={CONDA_PREFIX}/share/cmake/pybind11 \
        -DCMAKE_CXX_FLAGS=-DPYBIND11_CPP17 \
        $(Build.sourcesDirectory)/psi4
      cd psi4-obj
      make -j2
      make install >& psi4_install.log
      export PATH="$(Build.sourcesDirectory)/psi4-bin:$PATH"
    displayName: 'Compile Psi4'

  - bash: |
      source activate p4env
      echo "Conda path:" ${CONDA_PREFIX}
      echo "Python:" $(which python)
      python -V
      psi4 --version
      psi4 --plugin-compile
      PYBIND_INCLUDE=$(python -m pybind11 --includes)
      echo "PYBIND_INCLUDE:" $PYBIND_INCLUDE
      cmake -H. -B. \
        -C$(Build.sourcesDirectory)/psi4-bin/share/cmake/psi4/psi4PluginCache.cmake \
        -Dambit_DIR=${CONDA_PREFIX}/share/cmake/ambit \
        -DCMAKE_CXX_STANDARD=17 \
        -DPYTHON_EXECUTABLE="${CONDA_PREFIX}/bin/python" \
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
        -DENABLE_CODECOV=ON \
        -DCMAKE_CXX_FLAGS=-DPYBIND11_CPP17 \
        -DMAX_DET_ORB=${MAX_DET_ORB}
    displayName: 'Configure Build'

  - bash: |
      source activate p4env

      # copied from Psi4
      set -o pipefail
      cmake --build . -- -j2 VERBOSE=1 2>&1 | tee build.log | grep "Building"
      RESULT=$?

      if [ $RESULT -eq 0 ]; then
        echo build succeeded
      else
        echo build failed
        cat build.log
        exit 1
      fi

      export PYTHONPATH="$(dirname $PWD):$PYTHONPATH"
    displayName: 'Build Forte'

  - bash: |
      bash tools/forte_codecov
      if [ $MAX_DET_ORB -ge 128 ]; then
        cd tests/large_det
        python run_forte_tests.py --bw --failed_dump
        cd ../..
      fi
      ./forte_tests
      ./forte_benchmarks
      cd tests/pytest
      pytest
    displayName: 'Run Forte tests'
